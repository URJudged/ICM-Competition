% Define a triangular probability distribution
pd = makedist('Triangular');
pd1 = makedist('Triangular','a',0.1,'b',0.2,'c',0.3);
% Go bottom up, initialize nodes with underlings, superiors handled later

% All of the branches
branchA = node('Branch A',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),1);
branchB = node('Branch B',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),1);
branchC = node('Branch C',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),1);
branchD = node('Branch D',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),1);
branchE = node('Branch E',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),1);
branchF = node('Branch F',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),1);
branchG = node('Branch G',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),1);
branchH = node('Branch H',14,[],[],random(pd1, 1, 1),random(pd, 1, 1),...
    random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),1);
branchI = node('Branch I',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),1);
branchJ = node('Branch J',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),1);
branchK = node('Branch K',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),1);
branchL = node('Branch L',14,[],[],random(pd1, 1, 1),random(pd, 1, 1),...
    random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),1);

% All of the junior directors
director1 = node('Director 1',4,[],[branchA, branchB],random(pd1, 1, 1)...
    ,random(pd, 1, 1),random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),2);
director2 = node('Director 2',4,[],[branchC, branchD],random(pd1, 1, 1)...
    ,random(pd, 1, 1),random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),2);
director3 = node('Director 3',4,[],[branchE, branchF, branchG],random(pd1, 1, 1)...
    ,random(pd, 1, 1),random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),2);
director4 = node('Director 4',4,[],[branchH],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1)...
    ,2);
director5 = node('Director 5',4,[],[branchI, branchJ],random(pd1, 1, 1)...
    ,random(pd, 1, 1),random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),2);
director6 = node('Director 6',4,[],[branchK, branchL],random(pd1, 1, 1)...
    ,random(pd, 1, 1),random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),2);

% middle management
networks = node('Networks',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1)...
    ,3);
information = node('Information',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1)...
    ,3);
program = node('Program Manager',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1)...
    ,3);
production = node('Product Manager',14,[],[director1, director2, director3...
    , director4, director5, director6],random(pd1, 1, 1),random(pd, 1, 1)...
    , random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1)...
    ,3);
plantBlue = node('Plant Blue',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1)...
    ,3);
plantGreen = node('Plant Green',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1)...
    ,3);
regional = node('Regional',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1)...
    ,3);
worldWide = node('World Wide',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),3);
internet = node('Internet',14,[],[],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),3);

% upper management
research = node('Research',4,[],[networks, information],random(pd1, 1, 1)...
    ,random(pd, 1, 1),random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),4);
cio = node('CIO',14,[],[],random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1)...
    ,random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),4);
cfo = node('CFO',14,[],[],random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1)...
    ,random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),4);
hr = node('HR',4,[],[],random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1)...
    ,random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),4);
vp = node('VP',4,[],[program, production],random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),4);
facilities = node('Facilities',4,[],[plantBlue, plantGreen],random(pd1, 1, 1)...
    ,random(pd, 1, 1),random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),4);
sales = node('Sales Marketing',4,[],[regional, worldWide, internet],random(pd1, 1, 1)...
    ,random(pd, 1, 1),random(pd, 1, 1),random(pd1, 1, 1),random(pd, 1, 1)...
    ,random(pd, 1, 1),4);

% the big cheese
ceo = node('CEO',4,[],[research, cio, cfo, hr, vp, facilities, sales]...
    ,random(pd1, 1, 1),random(pd, 1, 1),random(pd, 1, 1),random(pd1, 1, 1)...
    ,random(pd, 1, 1),random(pd, 1, 1),5);

% Fill nodes with people
nodeL = [ceo,research,cio,cfo,hr,vp,facilities,sales,networks,information...
    ,program,production,plantBlue,plantGreen,regional,worldWide,internet...
    ,director1,director2,director3,director4,director5,director6,branchA...
    ,branchB,branchC,branchD,branchE,branchF,branchG,branchH,branchI...
    ,branchJ,branchK,branchL];
seats = 49;
while seats > 0
    branch = nodeL(randi(35));
    if size(branch.peopleL,2) < branch.numPositions
        level = branch.level;
        wageProb = branch.probLevel();
        branch.addPerson(person(random(pd,1,1)...
            ,random(pd,1,1),random(pd,1,1)...
            ,random(pd,1,1),random(wageProb,1,1)));
        seats = seats -1;
    end
end

% while seats > 0
%     for branch = nodeL
%         if size(branch.peopleL,2) >= branch.numPositions
%             
%         else
%             if randn < 0.85
%                 branch.addPerson(person(random(pd,1,1),random(pd,1,1)...
%                     ,random(pd,1,1),random(pd,1,1),random(pd,1,1)));
%                 seats = seats -1;
%                 break
%             end
% 
%         end
%     end
% end

% while seats > 0
%     % Add people to ceo
%     if randn > seats * (ceo.numPositions - size(ceo.peopleL,2))...
%             * ceo.wages / size(ceo.peopleL, 2)
%         ceo.addPerson(person(random(pd,0,1),random(pd,0,1),random(pd,0,1)...
%             ,random(pd,0,1),random(pd,0,1)));
%     else
%         % Add people to upper management
%         for upper = ceo.underlings
%             if randn > seats * (upper.numPositions - size(upper.peopleL,2))...
%                     * ceo.wages / size(upper.peopleL, 2);
%                 upper.addPerson(person(random(pd,0,1),random(pd,0,1),random(pd,0,1)...
%                     ,random(pd,0,1),random(pd,0,1)));
%                 break
%             else
%                 % Add people to middle management
%                 for middle = upper.underlings
%                     if randn > seats * (middle.numPositions - size(middle.peopleL,2))...
%                             * middle.wages / size(middle.peopleL, 2);
%                         middle.addPerson(person(random(pd,0,1),random(pd,0,1),random(pd,0,1)...
%                             ,random(pd,0,1),random(pd,0,1)));
%                         break
%                     else
%                         for directors = middle.underlings
%                             if randn > seats * (directors.numPositions - size(directors.peopleL,2))...
%                                     * directors.wages / size(directors.peopleL, 2);
%                                 directors.addPerson(person(random(pd,0,1),random(pd,0,1),random(pd,0,1)...
%                                     ,random(pd,0,1),random(pd,0,1)));
%                                 break
%                             else
%                                 for branch = directors.underlings
%                                     if randn > seats * (directors.numPositions - size(directors.peopleL,2))...
%                                            * directors.wages / size(directors.peopleL, 2); 
%                                        directors.addPerson(person(random(pd,0,1),random(pd,0,1),random(pd,0,1)...
%                                             ,random(pd,0,1),random(pd,0,1)));
%                                         break
%                                     end
%                                 end
%                             end
%                         end
%                     end
%                 end
%             end
%         end
%     end
% end

% Setting the superiors

% upper management superiors
ceoNumUnderlings = size(ceo.underlings,2);
% ceoNumUnderlings = ceoUnderlingsArrayDimensions(2);
% size(array) gives an array of sizes in different dimensions;
%   the "width" is the second such, so we want to select that one.

for upper = 1:ceoNumUnderlings
    
    ceo.underlings(upper).superior = ceo;
    
    upperUnderlingsArrayDimensions =...
        size(ceo.underlings(upper).underlings);
    upperNumUnderlings = upperUnderlingsArrayDimensions(2);
    
    % middle management superiors
    for middle = 1:upperNumUnderlings
        
        ceo.underlings(upper).underlings(middle).superior = ...
            ceo.underlings(upper);
        
        middleUnderlingsArrayDimensions =...
            size(ceo.underlings(upper).underlings(middle).underlings);
        middleNumUnderlings = middleUnderlingsArrayDimensions(2);
        
        % directors superiors
        for director = 1:middleNumUnderlings
            
            ceo.underlings(upper).underlings(middle).underlings(director)...
                .superior = ceo.underlings(upper).underlings(middle);
            
            directorUnderlingsArrayDimensions =...
                size(ceo.underlings(upper).underlings(middle)...
                .underlings(director).underlings);
            directorNumUnderlings = directorUnderlingsArrayDimensions(2);
            
            % branch superiors
            for branch = 1:directorNumUnderlings
                
                ceo.underlings(upper).underlings(middle)...
                    .underlings(director).underlings(branch).superior = ...
                    ceo.underlings(upper).underlings(middle)...
                    .underlings(director);
            end
       end        
    end
end

for branch = nodeL
    branch.startRelation();
end